SET time_zone = "+00:00";

CREATE TABLE IF NOT EXISTS `comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `post_id` int(11) NOT NULL,
  `name` varchar(64) NOT NULL,
  `email` varchar(64) NOT NULL,
  `content` text NOT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`id`),
  KEY `comments_ibfk_1` (`post_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=30 ;

INSERT INTO `comments` VALUES(22, 24, 'Person A', 'a@person.com', 'Dillinger is great!', '2014-10-14');
INSERT INTO `comments` VALUES(23, 24, 'Person B', 'b@person.com', 'No, Dillinger is awesome!', '2014-10-14');
INSERT INTO `comments` VALUES(24, 24, 'Person C', 'c@person.com', 'Oh please everyone, Dillinger is cool!', '2014-10-14');
INSERT INTO `comments` VALUES(25, 24, 'Person D with Savvy HTML Knowledge', 'd@person.com', 'For the love of God, <a href="http://dillinger.io/">Dillinger</a> is <b>great</b>, <i>awesome</i>, and <u>cool</u>!', '2014-10-14');
INSERT INTO `comments` VALUES(26, 25, 'Ted Kesgar', 'me@tkesgar.web.id', 'Lihat, bisa HTML. Sangat seru :3', '2014-10-14');
INSERT INTO `comments` VALUES(27, 25, 'Tito D. Kesumo Siregar', 't.kesgar@live.com', 'Ini tugas <strong>ampas</strong>.', '2014-10-14');
INSERT INTO `comments` VALUES(28, 25, 'Tito DKS', 'tito_dks@yahoo.com', '<h3>Memo to self</h3>\r\n<p style="text-transform: uppercase; color=''red'';">JANGAN LUPA KOMENTARNYA DIHAPUS</p>', '2014-10-14');
INSERT INTO `comments` VALUES(29, 26, 'Somebody <strong>Curious</strong>', 'curious@george.com', 'Why is this here?', '2014-10-15');

CREATE TABLE IF NOT EXISTS `posts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(128) NOT NULL,
  `content` text NOT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=28 ;

INSERT INTO `posts` VALUES(24, 'Dillinger', '<p><em>Content is taken from default content of Dillinger ([<a href="http://dillinger.io">http://dillinger.io</a>]).</em></p>\r\n<p>Dillinger is a cloud-enabled HTML5 Markdown editor.</p>\r\n<ul>\r\n<li>Type some Markdown text in the left window</li>\r\n<li>See the HTML in the right</li>\r\n<li>Magic</li>\r\n</ul>\r\n<p>Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email.  As <a href="http://daringfireball.net/">John Gruber</a> writes on the <a href="http://daringfireball.net/projects/markdown/">Markdown site</a>:</p>\r\n<blockquote>\r\n<p>The overriding design goal for Markdown''s\r\nformatting syntax is to make it as readable \r\nas possible. The idea is that a\r\nMarkdown-formatted document should be\r\npublishable as-is, as plain text, without\r\nlooking like it''s been marked up with tags\r\nor formatting instructions.</p>\r\n</blockquote>\r\n<p>This text you see here is <em>actually</em> written in Markdown! To get a feel for Markdown''s syntax, type some text into the left window and watch the results in the right.  </p>\r\n<h2 id="version">Version</h2>\r\n<p>2.0</p>\r\n<h2 id="tech">Tech</h2>\r\n<p>Dillinger uses a number of open source projects to work properly:</p>\r\n<ul>\r\n<li><a href="http://ace.ajax.org">Ace Editor</a> - awesome web-based text editor</li>\r\n<li><a href="https://github.com/chjj/marked">Marked</a> - a super fast port of Markdown to JavaScript</li>\r\n<li><a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> - great UI boilerplate for modern web apps</li>\r\n<li><a href="http://nodejs.org">node.js</a> - evented I/O for the backend</li>\r\n<li><a href="http://expressjs.com">Express</a> - fast node.js network app framework <a href="http://twitter.com/tjholowaychuk">@tjholowaychuk</a></li>\r\n<li><a href="https://github.com/madrobby/keymaster">keymaster.js</a> - awesome keyboard handler lib by <a href="http://twitter.com/thomasfuchs">@thomasfuchs</a></li>\r\n<li><a href="http://jquery.com">jQuery</a> - duh </li>\r\n</ul>\r\n<h2 id="installation">Installation</h2>\r\n<pre><code class="lang-sh">git clone [git-repo-url] dillinger\r\ncd dillinger\r\nnpm i -d\r\nmkdir -p public/files/{md,html,pdf}\r\n</code></pre>\r\n<h5 id="configure-plugins-instructions-in-following-readme-md-files">Configure Plugins. Instructions in following README.md files</h5>\r\n<ul>\r\n<li>plugins/dropbox/README.md</li>\r\n<li>plugins/github/README.md</li>\r\n<li>plugins/googledrive/README.md</li>\r\n</ul>\r\n<pre><code class="lang-sh">node app\r\n</code></pre>\r\n<h2 id="license">License</h2>\r\n<p>MIT</p>\r\n<p><strong>Free Software, Hell Yeah!</strong></p>', '2015-01-01');
INSERT INTO `posts` VALUES(25, 'Deskripsi Tugas', '<h1 id="simple-blog">Simple Blog</h1>\r\n<p>Tugas 1 IF3110.</p>\r\n<p><img src="http://i655.photobucket.com/albums/uu275/sonnylazuardi/ss-5.jpg" alt="Simple Blog"></p>\r\n<h2 id="deskripsi">Deskripsi</h2>\r\n<p>Gunakan template ini untuk membuat sebuah blog sederhana dengan menggunakan bahasa pemrograman PHP.</p>\r\n<h2 id="spesifikasi">Spesifikasi</h2>\r\n<h3 id="list-post">List Post</h3>\r\n<p>List Post merupakan halaman awal blog yang berisi daftar post yang sudah pernah dibuat. Setiap item pada list post mengandung <code>Judul</code>, <code>Tanggal</code>, <code>Konten</code>. Terdapat juga menu untuk mengedit dan menghapus item post tersebut.</p>\r\n<h3 id="add-post">Add Post</h3>\r\n<p>Add Post merupakan halaman untuk menambahkan post baru.  Post baru memiliki form untuk mengisi <code>Judul</code>, <code>Tanggal</code>, dan <code>Konten</code>. Lakukan <strong>validasi</strong> untuk tanggal dengan javascript agar tanggal yang dimasukkan lebih besar atau sama dengan tanggal saat menambahkan post baru tersebut.</p>\r\n<h3 id="edit-post">Edit Post</h3>\r\n<p>Mengedit post yang sudah pernah dibuat. Form yang ditampilkan sama seperti saat menambahkan form baru.</p>\r\n<h3 id="delete-post">Delete Post</h3>\r\n<p>Menghapus post yang sudah pernah dibuat. Lakukan <strong>konfimasi</strong> dengan javascript untuk konfirmasi pengguna terhadap penghapusan post tersebut. Keluarkan konfirmasi berisi pesan berikut</p>\r\n<pre><code>Apakah Anda yakin menghapus post ini?\r\n</code></pre><p>Jika pengguna memilih <code>yes</code> maka post terhapus, jika tidak maka post tidak jadi dihapus.</p>\r\n<h3 id="view-post">View Post</h3>\r\n<p>Halaman View Post merupakan halaman untuk melihat suatu post. Pada halaman ini terdapat informasi <code>Judul</code>, <code>Tanggal</code>, dan <code>Konten</code>, serta <strong>Komentar</strong> (spesifikasi di bawah).</p>\r\n<h3 id="komentar">Komentar</h3>\r\n<p>Komentar berisi daftar komentar yang ditulis untuk post tertentu. Form komentar terdiri dari <code>Nama</code>, <code>Email</code>, dan <code>Komentar</code>, simpan juga tanggal dibuatnya komentar tersebut. Setiap item pada list komentar berisi <code>Nama</code>, <code>Tanggal</code>, <code>Komentar</code>.</p>\r\n<p>Lakukan <strong>validasi</strong> email pada form komentar dengan menggunakan javascript. Komentar dibuat dengan menggunakan AJAX. Pemanggilan AJAX dilakukan saat</p>\r\n<ul>\r\n<li>Load list komentar</li>\r\n<li>Menambahkan komentar baru</li>\r\n</ul>\r\n<h2 id="tools">Tools</h2>\r\n<p>Pembuatan blog ini tidak boleh menggunakan framework PHP dan framework javascript.</p>\r\n<p><strong>Tidak boleh menggunakan jquery untuk ajax.</strong></p>\r\n<h2 id="deliverable">Deliverable</h2>\r\n<p>Masing-masing orang lakukan Fork pada repo ini. Jika sudah selesai tambahkan pull request ke repo ini.</p>\r\n<h2 id="lisensi">Lisensi</h2>\r\n<p>Â© 2014 Asisten IF3110</p>\r\n<p>Yogi | <a href="http://github.com/sonnylazuardi">Sonny</a> | Fathan | Renusa | Kelvin | Yanuar</p>\r\n<p>Dosen: <a href="http://github.com/yudis">Yudistira Dwi Wardhana</a></p>', '2015-02-02');
INSERT INTO `posts` VALUES(26, 'A collection of <code>.gitignore</code> templates', '&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://github.com/github/gitignore/blob/master/README.md&quot;&gt;https://github.com/github/gitignore/blob/master/README.md&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\r\n&lt;p&gt;This is GitHubâ€™s collection of &lt;a href=&quot;http://git-scm.com/docs/gitignore&quot;&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;/a&gt; file templates.\r\nWe use this list to populate the &lt;code&gt;.gitignore&lt;/code&gt; template choosers available\r\nin the GitHub.com interface when creating new repositories and files.&lt;/p&gt;\r\n&lt;p&gt;For more information about how &lt;code&gt;.gitignore&lt;/code&gt; files work, and how to use them,\r\nthe following resources are a great place to start:&lt;/p&gt;\r\n&lt;ul&gt;\r\n&lt;li&gt;The &lt;a href=&quot;http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files&quot;&gt;Ignoring Files chapter&lt;/a&gt; of the &lt;a href=&quot;http://git-scm.com/book&quot;&gt;Pro Git&lt;/a&gt; book.&lt;/li&gt;\r\n&lt;li&gt;The &lt;a href=&quot;https://help.github.com/articles/ignoring-files&quot;&gt;Ignoring Files article&lt;/a&gt; on the GitHub Help site.&lt;/li&gt;\r\n&lt;li&gt;The &lt;a href=&quot;http://git-scm.com/docs/gitignore&quot;&gt;gitignore(5)&lt;/a&gt; manual page.&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;h2 id=&quot;folder-structure&quot;&gt;Folder structure&lt;/h2&gt;\r\n&lt;p&gt;The files in the root directory are for &lt;code&gt;.gitignore&lt;/code&gt; templates that are\r\nproject specific, such as language or framework specific templates.\r\nGlobal (operating system or editor specific) templates should go into the\r\n&lt;a href=&quot;./Global&quot;&gt;&lt;code&gt;Global/&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt;\r\n&lt;h2 id=&quot;contributing-guidelines&quot;&gt;Contributing guidelines&lt;/h2&gt;\r\n&lt;p&gt;Weâ€™d love you to help us improve this project. To help us keep this collection\r\nhigh quality, we request that contributions adhere to the following guidelines.&lt;/p&gt;\r\n&lt;ul&gt;\r\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Provide a link to the application or projectâ€™s homepage&lt;/strong&gt;. Unless itâ€™s\r\nextremely popular, thereâ€™s a chance the maintainers donâ€™t know about or use\r\nthe language, framework, editor, app, or project your change applies to.&lt;/p&gt;\r\n&lt;/li&gt;\r\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Provide links to documentation&lt;/strong&gt; supporting the change youâ€™re making.\r\nCurrent, canonical documentation mentioning the files being ignored is best.\r\nIf documentation isnâ€™t available to support your change, do the best you can\r\nto explain what the files being ignored are for.&lt;/p&gt;\r\n&lt;/li&gt;\r\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Explain why youâ€™re making a change&lt;/strong&gt;. Even if it seems self-evident, please\r\ntake a sentence or two to tell us why your change or addition should happen.\r\nItâ€™s especially helpful to articulate why this change applies to &lt;em&gt;everyone&lt;/em&gt;\r\nwho works with the applicable technology, rather than just you or your team.&lt;/p&gt;\r\n&lt;/li&gt;\r\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Please consider the scope of your change&lt;/strong&gt;. If your change specific to a\r\ncertain language or framework, then make sure the change is made to the\r\ntemplate for that language or framework, rather than to the template for an\r\neditor, tool, or operating system.&lt;/p&gt;\r\n&lt;/li&gt;\r\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Please only modify &lt;em&gt;one template&lt;/em&gt; per pull request&lt;/strong&gt;. This helps keep pull\r\nrequests and feedback focused on a specific project or technology.&lt;/p&gt;\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;p&gt;In general, the more you can do to help us understand the change youâ€™re making,\r\nthe more likely weâ€™ll be to accept your contribution quickly.&lt;/p&gt;\r\n&lt;p&gt;Please also understand that we canâ€™t list every tool that ever existed.\r\nOur aim is to curate a collection of the &lt;em&gt;most common and helpful&lt;/em&gt; templates,\r\nnot to make sure we cover every project possible. If we choose not to\r\ninclude your language, tool, or project, itâ€™s not because itâ€™s not awesome.&lt;/p&gt;\r\n&lt;h2 id=&quot;contributing-workflow&quot;&gt;Contributing workflow&lt;/h2&gt;\r\n&lt;p&gt;Hereâ€™s how we suggest you go about proposing a change to this project:&lt;/p&gt;\r\n&lt;ol&gt;\r\n&lt;li&gt;&lt;a href=&quot;http://help.github.com/forking/&quot;&gt;Fork this project&lt;/a&gt; to your account.&lt;/li&gt;\r\n&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/creating-and-deleting-branches-within-your-repository&quot;&gt;Create a branch&lt;/a&gt; for the change you intend to make.&lt;/li&gt;\r\n&lt;li&gt;Make your changes to your fork.&lt;/li&gt;\r\n&lt;li&gt;&lt;a href=&quot;http://help.github.com/pull-requests/&quot;&gt;Send a pull request&lt;/a&gt; from your forkâ€™s branch to our &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt;\r\n&lt;/ol&gt;\r\n&lt;p&gt;Using the web-based interface to make changes is fine too, and will help you\r\nby automatically forking the project and prompting to send a pull request too.&lt;/p&gt;\r\n&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;\r\n&lt;p&gt;&lt;a href=&quot;./LICENSE&quot;&gt;MIT&lt;/a&gt;.&lt;/p&gt;', '2015-03-03');
INSERT INTO `posts` VALUES(27, 'Readme Driven Development', '&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://github.com/mojombo/mojombo.github.io/blob/master/_posts/2010-08-23-readme-driven-development.md&quot;&gt;mojombo.github.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\r\n&lt;p&gt;&lt;p class=&quot;meta&quot;&gt;23 August 2010 - San Francisco&lt;/p&gt;\r\n\r\n&lt;/p&gt;\r\n&lt;p&gt;I hear a lot of talk these days about TDD and BDD and Extreme Programming and SCRUM and stand up meetings and all kinds of methodologies and techniques for developing better software, but it''s all irrelevant unless the software we''re building meets the needs of those that are using it. Let me put that another way. A perfect implementation of the wrong specification is worthless. By the same principle a beautifully crafted library with no documentation is also damn near worthless. If your software solves the wrong problem or nobody can figure out how to use it, there''s something very bad going on.&lt;/p&gt;\r\n&lt;p&gt;Fine. So how do we solve this problem? It''s easier than you think, and it''s important enough to warrant its very own paragraph.&lt;/p&gt;\r\n&lt;p&gt;Write your Readme first.&lt;/p&gt;\r\n&lt;p&gt;First. As in, before you write any code or tests or behaviors or stories or ANYTHING. I know, I know, we''re programmers, dammit, not tech writers! But that''s where you''re wrong. Writing a Readme is absolutely essential to writing good software. Until you''ve written about your software, you have no idea what you''ll be coding. Between The Great Backlash Against Waterfall Design and The Supreme Acceptance of Agile Development, something was lost. Don''t get me wrong, waterfall design takes things way too far. Huge systems specified in minute detail end up being the WRONG systems specified in minute detail. We were right to strike it down. But what took its place is too far in the other direction. Now we have projects with short, badly written, or entirely missing documentation. Some projects don''t even have a Readme!&lt;/p&gt;\r\n&lt;p&gt;This is not acceptable. There must be some middle ground between reams of technical specifications and no specifications at all. And in fact there is. That middle ground is the humble Readme.&lt;/p&gt;\r\n&lt;p&gt;It''s important to distinguish Readme Driven Development from Documentation Driven Development. RDD could be considered a subset or limited version of DDD. By restricting your design documentation to a single file that is intended to be read as an introduction to your software, RDD keeps you safe from DDD-turned-waterfall syndrome by punishing you for lengthy or overprecise specification. At the same time, it rewards you for keeping libraries small and modularized. These simple reinforcements go a long way towards driving your project in the right direction without a lot of process to ensure you do the right thing.&lt;/p&gt;\r\n&lt;p&gt;By writing your Readme first you give yourself some pretty significant advantages:&lt;/p&gt;\r\n&lt;ul&gt;\r\n&lt;li&gt;&lt;p&gt;Most importantly, you''re giving yourself a chance to think through the project without the overhead of having to change code every time you change your mind about how something should be organized or what should be included in the Public API. Remember that feeling when you first started writing automated code tests and realized that you caught all kinds of errors that would have otherwise snuck into your codebase? That''s the exact same feeling you''ll have if you write the Readme for your project before you write the actual code.&lt;/p&gt;\r\n&lt;/li&gt;\r\n&lt;li&gt;&lt;p&gt;As a byproduct of writing a Readme in order to know what you need to implement, you''ll have a very nice piece of documentation sitting in front of you. You''ll also find that it''s much easier to write this document at the beginning of the project when your excitement and motivation are at their highest. Retroactively writing a Readme is an absolute drag, and you''re sure to miss all kinds of important details when you do so.&lt;/p&gt;\r\n&lt;/li&gt;\r\n&lt;li&gt;&lt;p&gt;If you''re working with a team of developers you get even more mileage out of your Readme. If everyone else on the team has access to this information before you''ve completed the project, then they can confidently start work on other projects that will interface with your code. Without any sort of defined interface, you have to code in serial or face reimplementing large portions of code.&lt;/p&gt;\r\n&lt;/li&gt;\r\n&lt;li&gt;&lt;p&gt;It''s a lot simpler to have a discussion based on something written down. It''s easy to talk endlessly and in circles about a problem if nothing is ever put to text. The simple act of writing down a proposed solution means everyone has a concrete idea that can be argued about and iterated upon.&lt;/p&gt;\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;p&gt;Consider the process of writing the Readme for your project as the true act of creation. This is where all your brilliant ideas should be expressed. This document should stand on its own as a testament to your creativity and expressiveness. The Readme should be the single most important document in your codebase; writing it first is the proper thing to do.&lt;/p&gt;\r\n&lt;p&gt;--&lt;/p&gt;\r\n&lt;p&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=1627246&quot;&gt;Discuss this post on Hacker News&lt;/a&gt;&lt;/p&gt;', '2015-04-04');


ALTER TABLE `comments`
  ADD CONSTRAINT `comments_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `posts` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
